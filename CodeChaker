import time
import paho.mqtt.client as paho
from paho import mqtt
from playsound import playsound
from datetime import datetime

import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore

cred = credentials.Certificate("serviceAccountKey.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

noww = datetime.now()
currentYearString = int(noww.strftime("%Y"))
currentMonthString = int(noww.strftime("%m"))
currentDayString = int(noww.strftime("%d"))


oldData = ""

#dd
#calification du temps systèeme par période
now = datetime.now()
currentTimeString = now.strftime("%H")
currentTime = int(currentTimeString)
if 6 <= currentTime <= 8:
    periode="one"
elif 8 <= currentTime < 10:
    periode="Tow"
elif 10 <= currentTime < 12:
    periode="Three"
elif 12 <= currentTime < 14:
    periode="Four"
elif 14 <= currentTime < 16:
    periode="Five"
elif 16 <= currentTime < 18:
    periode="Six"
elif 18 <= currentTime < 20:
    periode="Seven"
elif 20 <= currentTime < 22:
    periode="Eight"
else:
    periode="Nine"

qrdate=""


# setting callbacks for different events to see if it works, print the message etc.
def on_connect(client, userdata, flags, rc, properties=None):
    print("CONNACK received with code %s." % rc)

# with this callback you can see if your publish was successful
def on_publish(client, userdata, mid, properties=None):
    print("mid: " + str(mid))

# print which topic was subscribed to
def on_subscribe(client, userdata, mid, granted_qos, properties=None):
    print("Subscribed: " + str(mid) + " " + str(granted_qos))

# print message, useful for checking if it was successful
def on_message(client, userdata, msg):
            global oldData
            data = str(msg.payload)
            data = data.replace('b', '')
            data = data.replace("'", '')
            b=True
            try:
                if(len(data)==32):
                    docs = db.collection(u'Reservation').where(u'ClientID', u'==', data).where(periode, u'==', True).where(u'Year', u'==', currentYearString).where(u'Month', u'==', currentMonthString).where(u'Date', u'==', currentDayString).stream()
                    for doc in docs:
                        if(oldData != data):
                            oldData = data
                            reservation = doc.to_dict()
                            # a single publish, this can also be done in loops, etc.
                            valid = " Valid entry for the Client: "+str(reservation['ClientID'])
                            client.publish("open/parkinny", payload=valid, qos=1)
                            b=False
                            playsound('./wlc.mp3')  
                        else:
                            b=False                   
                    if(b):
                        playsound('./noReservationFound.mp3') 
                else:
                    playsound('./notClientQr.mp3')
            except ValueError:
                playsound('./notClientQr.mp3') 
            
    
    

# using MQTT version 5 here, for 3.1.1: MQTTv311, 3.1: MQTTv31
# userdata is user defined data of any type, updated by user_data_set()
# client_id is the given name of the client
client = paho.Client(client_id="", userdata=None, protocol=paho.MQTTv5)
client.on_connect = on_connect

# enable TLS for secure connection
client.tls_set(tls_version=mqtt.client.ssl.PROTOCOL_TLS)
# set username and password
client.username_pw_set("pcFace", "Dali19974")
                                # connect to HiveMQ Cloud on port 8883 (default for MQTT)
client.connect("d62d6f41f62b4c0698d334a94fc4c32b.s1.eu.hivemq.cloud", 8883)

# setting callbacks, use separate functions like above for better visibility
client.on_subscribe = on_subscribe
client.on_message = on_message
client.on_publish = on_publish

# subscribe to all topics of encyclopedia by using the wildcard "#"
client.subscribe("door/#", qos=1)



# loop_forever for simplicity, here you need to stop the loop manually
# you can also use loop_start and loop_stop
client.loop_forever()